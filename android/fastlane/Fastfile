# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

xcodeproj = File.absolute_path('../ios/AppName.xcodeproj')
xcworkspace = File.absolute_path('../ios/AppName.xcworkspace')
github_match_url = "https://github.com/Org-Name/certificate-manager"
firebase_android_distribution_groups = "qa-team"
firebase_ios_distribution_groups = "qa-team"
android_commit_message = "[ci skip] Version Bump: #{ENV['VERSION_NAME']} (#{ENV['VERSION_CODE']})"
ios_commit_message = "[ci skip] Version Bump: #{ENV['VERSION_NUMBER']} (#{ENV['BUILD_NUMBER']})"
plist_file_path = "../ios/AppName/Info.plist"
adhoc_provision_file = "match AdHoc com.orgname.appname"
appstore_provision_file = "match AppStore com.orgname.appname"
ios_app_scheme = "AppName"
apple_username = "your-email@gmail.com"
code_signing_identity = "Apple Distribution: Owner Name (SLT12345V)"

platform :android do 
  desc "Android Production Build and Deploy to Firebase App Distribution"
  lane :firebase do 
    increment_version_code(gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    gradle(task: 'clean', project_dir: File.absolute_path('../android'))
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: File.absolute_path('../android'),
      properties: {
        "android.injected.signing.store.file" => ENV['ANDROID_KEYSTORE_FILE'],
        "android.injected.signing.store.password" => ENV['ANDROID_KEYSTORE_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['ANDROID_KEYSTORE_ALIAS'],
        "android.injected.signing.key.password" => ENV['ANDROID_KEYSTORE_PASSWORD']
      }
    )
    firebase_app_distribution(
      app: ENV['FIREBASE_ANDROID_APP_ID'],
      groups: firebase_android_distribution_groups,
      service_credentials_file: File.absolute_path('../firebase-service-account.json'),
      android_artifact_type: "AAB"
    )
  end
  desc "Android Production Build and Deploy to Play Store Beta"
  lane :beta do 
    increment_version_code(version_code: ENV['VERSION_CODE'].to_i, gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    increment_version_name(version_name: ENV['VERSION_NAME'], gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    gradle(task: 'clean', project_dir: File.absolute_path('../android'))
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: File.absolute_path('../android'),
      properties: {
        "android.injected.signing.store.file" => ENV['ANDROID_KEYSTORE_FILE'],
        "android.injected.signing.store.password" => ENV['ANDROID_KEYSTORE_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['ANDROID_KEYSTORE_ALIAS'],
        "android.injected.signing.key.password" => ENV['ANDROID_KEYSTORE_PASSWORD']
      }
    )
    upload_to_play_store(
      track: 'beta',
      aab: File.absolute_path('../android/app/build/outputs/bundle/release/app-release.aab'),
      release_status: 'draft',
      package_name: ENV['BUNDLE_ID'],
      json_key: File.absolute_path('../playstore-service-account.json')
    )
    git_commit(
      path: [File.absolute_path('../android/app/build.gradle')],
      message: android_commit_message
    )
    push_to_git_remote
  end
  desc "Android Production Build and Deploy to Play Store Production"
  lane :production do
    increment_version_code(version_code: ENV['VERSION_CODE'].to_i, gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    increment_version_name(version_name: ENV['VERSION_NAME'], gradle_file_path: File.absolute_path('../android/app/build.gradle'))
    gradle(task: 'clean', project_dir: File.absolute_path('../android'))
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: File.absolute_path('../android'),
      properties: {
        "android.injected.signing.store.file" => ENV['ANDROID_KEYSTORE_FILE'],
        "android.injected.signing.store.password" => ENV['ANDROID_KEYSTORE_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['ANDROID_KEYSTORE_ALIAS'],
        "android.injected.signing.key.password" => ENV['ANDROID_KEYSTORE_PASSWORD']
      }
    )
    upload_to_play_store(
      track: 'production',
      aab: File.absolute_path('../android/app/build/outputs/bundle/release/app-release.aab'),
      release_status: 'draft',
      package_name: ENV['BUNDLE_ID'],
      json_key: File.absolute_path('../playstore-service-account.json')
    )
    git_commit(
      path: [File.absolute_path('../android/app/build.gradle')],
      message: android_commit_message
    )
    push_to_git_remote
  end
end

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
create_keychain(
  name: name,
  password: password,
  unlock: false,
  timeout: 0
)
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end
